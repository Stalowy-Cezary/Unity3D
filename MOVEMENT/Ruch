using UnityEngine;
public class pepo : MonoBehaviour
{
	[SerializeField, Range(0f, 100f)]
	float maxSpeed = 10f;

	[SerializeField, Range(0f, 10f)]
	float jumpHeight = 5f;

	[SerializeField, Range(0f, 100f)]
	float maxAcceleration = 10f;

	[SerializeField, Range(0, 5)]
	int maxAirJumps = 2;

	int JumpPhase;
	Vector3 velocity, desiredVelocity;

	Rigidbody body;

	bool desiredJump, onGround;

	void Awake ()
    {
		body = GetComponent<Rigidbody>();
    }

	void Update()
	{
 		Vector2 playerInput;

		playerInput.x = Input.GetAxis("Horizontal");
		playerInput.y = Input.GetAxis("Vertical");

		desiredVelocity = new Vector3(playerInput.x, 0f, playerInput.y) * maxSpeed;
		desiredJump |= Input.GetButtonDown("Jump");
	}
	void FixedUpdate()
	{
		velocity = body.velocity;
		float maxSpeedChange = maxAcceleration * Time.deltaTime;

		velocity.x = Mathf.MoveTowards(velocity.x, desiredVelocity.x, maxSpeedChange);
		velocity.z = Mathf.MoveTowards(velocity.z, desiredVelocity.z, maxSpeedChange);
		if (desiredJump)
        {
			desiredJump = false;
			Jump();
        }
		onGround = false;
		body.velocity = velocity;
	}
	void Jump()
    {
		if (onGround || JumpPhase < maxAirJumps)
		{
			JumpPhase++;
			float jumpSpeed = Mathf.Sqrt(-2f * Physics.gravity.y * jumpHeight);
			if (velocity.y > 0f)
            {
				jumpSpeed = Mathf.Max(jumpSpeed - velocity.y, 0f);
				jumpSpeed -= velocity.y;
            }
			velocity.y += jumpSpeed;
		}
    }
	void OnCollisionStay (Collision collision)
    {
		JumpPhase = 0;
		EvaluateCollision(collision);
	}
	void EvaluateCollision (Collision collision)
    {
		for (int i = 0; i < collision.contactCount; i++)
        {
			Vector3 normal = collision.GetContact(i).normal;
			onGround |= normal.y >= 0.9f;
        }
    }
}
